{"abi":[{"type":"function","name":"redeemKeys","inputs":[{"name":"locksmith","type":"address","internalType":"address"},{"name":"rootKeyId","type":"uint256","internalType":"uint256"},{"name":"keyId","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"useKeys","inputs":[{"name":"locksmith","type":"address","internalType":"address"},{"name":"keyId","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"destination","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"keyLockerDeposit","inputs":[{"name":"operator","type":"address","indexed":false,"internalType":"address"},{"name":"locksmith","type":"address","indexed":false,"internalType":"address"},{"name":"keyId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"keyLockerLoan","inputs":[{"name":"operator","type":"address","indexed":false,"internalType":"address"},{"name":"locksmith","type":"address","indexed":false,"internalType":"address"},{"name":"keyId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"count","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"destination","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"keyLockerWithdrawal","inputs":[{"name":"operator","type":"address","indexed":false,"internalType":"address"},{"name":"locksmith","type":"address","indexed":false,"internalType":"address"},{"name":"rootKeyId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"keyId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"redeemKeys(address,uint256,uint256,uint256)":"54d178e4","supportsInterface(bytes4)":"01ffc9a7","useKeys(address,uint256,uint256,address,bytes)":"816dac14"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locksmith\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"keyLockerDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locksmith\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"keyLockerLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locksmith\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rootKeyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"keyLockerWithdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locksmith\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rootKeyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemKeys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locksmith\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"keyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"useKeys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"keyLockerDeposit(address,address,uint256,uint256)\":{\"params\":{\"amount\":\"the amount of keys deposited for locker use\",\"keyId\":\"the ID of the key that was deposited\",\"locksmith\":\"the address of the locksmith the key is for\",\"operator\":\"the message sender that deposited the key \"}},\"keyLockerLoan(address,address,uint256,uint256,address)\":{\"params\":{\"count\":\"the number of keys successfully loaned out\",\"destination\":\"where the keys were sent.\",\"keyId\":\"the ID of the key loaned out\",\"locksmith\":\"the locksmith contract of the key loaned out\",\"operator\":\"the key holder who is initiating the loan\"}},\"keyLockerWithdrawal(address,address,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"the amount of keys redeemed from locker use\",\"keyId\":\"the ID of the key that was removed\",\"locksmith\":\"the address of the locksmith the key is for\",\"operator\":\"the message sender that removed and received the key\",\"rootKeyId\":\"the verified root key ID that was used for removal\"}}},\"kind\":\"dev\",\"methods\":{\"redeemKeys(address,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"the number of keys to fully redeem\",\"keyId\":\"the key ID to redeem.\",\"locksmith\":\"the dependency injected locksmith to use\",\"rootKeyId\":\"the root key you are using to redeem\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"useKeys(address,uint256,uint256,address,bytes)\":{\"params\":{\"amount\":\"the number of keys to take on loan \",\"data\":\"the encoded calldata to send along with the key to destination.\",\"destination\":\"the target address to send the key, requiring it be returned\",\"keyId\":\"the key ID you want to action\",\"locksmith\":\"the dependency injected locksmith to use.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"keyLockerDeposit(address,address,uint256,uint256)\":{\"notice\":\"keyLockerDeposit This event is emitted when a key is sent to the contract.\"},\"keyLockerLoan(address,address,uint256,uint256,address)\":{\"notice\":\"keyLockerLoan This event is fired when a key is loaned out of the locker. Returns will register keyLockerDeposit events.\"},\"keyLockerWithdrawal(address,address,uint256,uint256,uint256)\":{\"notice\":\"keyLockerWithdrawal This event is emitted when a key is removed from the contract permanently, which can only be done by the trust root key holder. \"}},\"kind\":\"user\",\"methods\":{\"redeemKeys(address,uint256,uint256,uint256)\":{\"notice\":\"redeemKeys  If a key is held in the locker for use, only a root key holder can remove it.  This process is known as \\\"redemption\\\" as the root key is used to redeem the key out of the contract and deactivate the locker for it. The reason only a root key can remove the key is due to security. It is assumed that an unbound key can be put into the locker by anyone, as only the root key holder can create unbound keys. However, we want to avoid situations where key holders can't sign a transaction that steals the extra key in any way. A properly segmented wallet EOA won't be holding a root key, and such using the key locker is safe even against malicious transactions. This method can revert for the following reasons: - InsufficientKeys(): The key locker doesn't currently hold keyId from the provided locksmith. - KeyNotHeld(): The message sender doesn't hold the associated root key - InvalidRing(): The message sender is attempting to redeem a key with the wrong root key. - KeyNotRoot(): The message sender is attempting to redeem a key not using a root key.\"},\"useKeys(address,uint256,uint256,address,bytes)\":{\"notice\":\"useKeys  A message sender is assumed to be calling this method while holding a soulbound version of the key the expect to use. If held, the caller's provided destination and calldata will be used to *send* the key into the destination contract with associated calldata. It is *critical* that this interface is not extended to otherwise delegate calls or call other contracts from the Locker because the locker will also hold other keys. It is fully expected that the key will be returned to the locker by the end of the transaction, or the entire transction will revert. This protects the key from being arbitrarily stolen. It will also ensure that at the end of the transaction the message sender is still holding the soulbound key, as to ensure malicious transactions cannot use the Locker to somehow strip you of the permission you are using. It is not explicitly enforced that *other* keys cannot be removed from the caller for composability. When using a root key locker, it is critical to trust the destination contract. This method can revert for the following reasons: - InsufficientKey(): The key locker doesn't currently hold keyId from the provided locksmith. - KeyNotHeld(): The message sender doesn't hold the proper key to use the locker. - KeyNotReturned(): The instructions didn't result in the key being returned. \"}},\"notice\":\"KeyLocker  The Key locker acts as a secure key vault and agent. Normally, all keys (including root keys) will be soulbound to their default EOAs. This ensures that key holders can not easily be drained of their keys via malicious signatures or transactions. However, soulbound keys can not be easily stored or moved, and thus secure access to a moveable key that must be returned has the delegation benefits of account abstraction without the associated security risks of losing or leaking access to untrusted third parties. To use, an operator that has possession to an unbound key can send it into the contract to create a locker. Any operator that holds the same key can call #useKey to produce a delegated execution path, with the locker asserting that the transaction completes with the key returned. Only root key holds can move the key out of the locker permanently by calling #redeemKey.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IKeyLocker.sol\":\"IKeyLocker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"src/interfaces/IKeyLocker.sol\":{\"keccak256\":\"0x4fd5632f1d1607965e41c0ed39815ec8bb26fc2a764fa1e539cabfff8fe4ef4d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d3c48bb59d02671deb8ed828e881fd71ee718f79df5be55f80ba4b6435798cb\",\"dweb:/ipfs/QmfDfvToMc9jJVRqeCHMS7H8xxAFmWLunYAJbFZwi8QeTQ\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":false},{"internalType":"address","name":"locksmith","type":"address","indexed":false},{"internalType":"uint256","name":"keyId","type":"uint256","indexed":false},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"keyLockerDeposit","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":false},{"internalType":"address","name":"locksmith","type":"address","indexed":false},{"internalType":"uint256","name":"keyId","type":"uint256","indexed":false},{"internalType":"uint256","name":"count","type":"uint256","indexed":false},{"internalType":"address","name":"destination","type":"address","indexed":false}],"type":"event","name":"keyLockerLoan","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":false},{"internalType":"address","name":"locksmith","type":"address","indexed":false},{"internalType":"uint256","name":"rootKeyId","type":"uint256","indexed":false},{"internalType":"uint256","name":"keyId","type":"uint256","indexed":false},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"keyLockerWithdrawal","anonymous":false},{"inputs":[{"internalType":"address","name":"locksmith","type":"address"},{"internalType":"uint256","name":"rootKeyId","type":"uint256"},{"internalType":"uint256","name":"keyId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"redeemKeys"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"locksmith","type":"address"},{"internalType":"uint256","name":"keyId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"destination","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"useKeys"}],"devdoc":{"kind":"dev","methods":{"redeemKeys(address,uint256,uint256,uint256)":{"params":{"amount":"the number of keys to fully redeem","keyId":"the key ID to redeem.","locksmith":"the dependency injected locksmith to use","rootKeyId":"the root key you are using to redeem"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"useKeys(address,uint256,uint256,address,bytes)":{"params":{"amount":"the number of keys to take on loan ","data":"the encoded calldata to send along with the key to destination.","destination":"the target address to send the key, requiring it be returned","keyId":"the key ID you want to action","locksmith":"the dependency injected locksmith to use."}}},"version":1},"userdoc":{"kind":"user","methods":{"redeemKeys(address,uint256,uint256,uint256)":{"notice":"redeemKeys  If a key is held in the locker for use, only a root key holder can remove it.  This process is known as \"redemption\" as the root key is used to redeem the key out of the contract and deactivate the locker for it. The reason only a root key can remove the key is due to security. It is assumed that an unbound key can be put into the locker by anyone, as only the root key holder can create unbound keys. However, we want to avoid situations where key holders can't sign a transaction that steals the extra key in any way. A properly segmented wallet EOA won't be holding a root key, and such using the key locker is safe even against malicious transactions. This method can revert for the following reasons: - InsufficientKeys(): The key locker doesn't currently hold keyId from the provided locksmith. - KeyNotHeld(): The message sender doesn't hold the associated root key - InvalidRing(): The message sender is attempting to redeem a key with the wrong root key. - KeyNotRoot(): The message sender is attempting to redeem a key not using a root key."},"useKeys(address,uint256,uint256,address,bytes)":{"notice":"useKeys  A message sender is assumed to be calling this method while holding a soulbound version of the key the expect to use. If held, the caller's provided destination and calldata will be used to *send* the key into the destination contract with associated calldata. It is *critical* that this interface is not extended to otherwise delegate calls or call other contracts from the Locker because the locker will also hold other keys. It is fully expected that the key will be returned to the locker by the end of the transaction, or the entire transction will revert. This protects the key from being arbitrarily stolen. It will also ensure that at the end of the transaction the message sender is still holding the soulbound key, as to ensure malicious transactions cannot use the Locker to somehow strip you of the permission you are using. It is not explicitly enforced that *other* keys cannot be removed from the caller for composability. When using a root key locker, it is critical to trust the destination contract. This method can revert for the following reasons: - InsufficientKey(): The key locker doesn't currently hold keyId from the provided locksmith. - KeyNotHeld(): The message sender doesn't hold the proper key to use the locker. - KeyNotReturned(): The instructions didn't result in the key being returned. "}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":20000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IKeyLocker.sol":"IKeyLocker"},"libraries":{}},"sources":{"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b","urls":["bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df","dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"],"license":"MIT"},"src/interfaces/IKeyLocker.sol":{"keccak256":"0x4fd5632f1d1607965e41c0ed39815ec8bb26fc2a764fa1e539cabfff8fe4ef4d","urls":["bzz-raw://7d3c48bb59d02671deb8ed828e881fd71ee718f79df5be55f80ba4b6435798cb","dweb:/ipfs/QmfDfvToMc9jJVRqeCHMS7H8xxAFmWLunYAJbFZwi8QeTQ"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"src/interfaces/IKeyLocker.sol","id":49491,"exportedSymbols":{"CallerKeyStripped":[49421],"IERC165":[46389],"IKeyLocker":[49490],"InsufficientKeys":[49417],"InvalidInput":[49423],"KeyNotReturned":[49419]},"nodeType":"SourceUnit","src":"33:7872:35","nodes":[{"id":49413,"nodeType":"PragmaDirective","src":"33:24:35","nodes":[],"literals":["solidity","^","0.8",".23"]},{"id":49415,"nodeType":"ImportDirective","src":"58:91:35","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol","file":"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol","nameLocation":"-1:-1:-1","scope":49491,"sourceUnit":46390,"symbolAliases":[{"foreign":{"id":49414,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46389,"src":"67:7:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":49417,"nodeType":"ErrorDefinition","src":"334:25:35","nodes":[],"errorSelector":"0b310b86","name":"InsufficientKeys","nameLocation":"340:16:35","parameters":{"id":49416,"nodeType":"ParameterList","parameters":[],"src":"356:2:35"}},{"id":49419,"nodeType":"ErrorDefinition","src":"509:23:35","nodes":[],"errorSelector":"12e71cb4","name":"KeyNotReturned","nameLocation":"515:14:35","parameters":{"id":49418,"nodeType":"ParameterList","parameters":[],"src":"529:2:35"}},{"id":49421,"nodeType":"ErrorDefinition","src":"716:26:35","nodes":[],"errorSelector":"c589ec25","name":"CallerKeyStripped","nameLocation":"722:17:35","parameters":{"id":49420,"nodeType":"ParameterList","parameters":[],"src":"739:2:35"}},{"id":49423,"nodeType":"ErrorDefinition","src":"988:21:35","nodes":[],"errorSelector":"b4fa3fb3","name":"InvalidInput","nameLocation":"994:12:35","parameters":{"id":49422,"nodeType":"ParameterList","parameters":[],"src":"1006:2:35"}},{"id":49490,"nodeType":"ContractDefinition","src":"1969:5935:35","nodes":[{"id":49437,"nodeType":"EventDefinition","src":"2555:91:35","nodes":[],"anonymous":false,"documentation":{"id":49427,"nodeType":"StructuredDocumentation","src":"2144:406:35","text":" keyLockerDeposit\n This event is emitted when a key is sent to the contract.\n @param operator         the message sender that deposited the key \n @param locksmith        the address of the locksmith the key is for\n @param keyId            the ID of the key that was deposited\n @param amount           the amount of keys deposited for locker use"},"eventSelector":"419ba344522b3c8934d036ec918aeab3ec642260a80d5b9b038cf313633d8807","name":"keyLockerDeposit","nameLocation":"2561:16:35","parameters":{"id":49436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49429,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"2586:8:35","nodeType":"VariableDeclaration","scope":49437,"src":"2578:16:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49428,"name":"address","nodeType":"ElementaryTypeName","src":"2578:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":49431,"indexed":false,"mutability":"mutable","name":"locksmith","nameLocation":"2604:9:35","nodeType":"VariableDeclaration","scope":49437,"src":"2596:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49430,"name":"address","nodeType":"ElementaryTypeName","src":"2596:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":49433,"indexed":false,"mutability":"mutable","name":"keyId","nameLocation":"2623:5:35","nodeType":"VariableDeclaration","scope":49437,"src":"2615:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49432,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":49435,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2638:6:35","nodeType":"VariableDeclaration","scope":49437,"src":"2630:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49434,"name":"uint256","nodeType":"ElementaryTypeName","src":"2630:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2577:68:35"}},{"id":49450,"nodeType":"EventDefinition","src":"3129:108:35","nodes":[],"anonymous":false,"documentation":{"id":49438,"nodeType":"StructuredDocumentation","src":"2659:465:35","text":" keyLockerLoan\n This event is fired when a key is loaned out of the locker.\n Returns will register keyLockerDeposit events.\n @param operator the key holder who is initiating the loan\n @param locksmith the locksmith contract of the key loaned out\n @param keyId the ID of the key loaned out\n @param count the number of keys successfully loaned out\n @param destination where the keys were sent."},"eventSelector":"95cc1e5a765c43fd6c9eb4821c5ef83bc6b9e565fd8d093ad270794daaf3be8e","name":"keyLockerLoan","nameLocation":"3135:13:35","parameters":{"id":49449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49440,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"3157:8:35","nodeType":"VariableDeclaration","scope":49450,"src":"3149:16:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49439,"name":"address","nodeType":"ElementaryTypeName","src":"3149:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":49442,"indexed":false,"mutability":"mutable","name":"locksmith","nameLocation":"3175:9:35","nodeType":"VariableDeclaration","scope":49450,"src":"3167:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49441,"name":"address","nodeType":"ElementaryTypeName","src":"3167:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":49444,"indexed":false,"mutability":"mutable","name":"keyId","nameLocation":"3194:5:35","nodeType":"VariableDeclaration","scope":49450,"src":"3186:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49443,"name":"uint256","nodeType":"ElementaryTypeName","src":"3186:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":49446,"indexed":false,"mutability":"mutable","name":"count","nameLocation":"3209:5:35","nodeType":"VariableDeclaration","scope":49450,"src":"3201:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49445,"name":"uint256","nodeType":"ElementaryTypeName","src":"3201:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":49448,"indexed":false,"mutability":"mutable","name":"destination","nameLocation":"3224:11:35","nodeType":"VariableDeclaration","scope":49450,"src":"3216:19:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49447,"name":"address","nodeType":"ElementaryTypeName","src":"3216:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3148:88:35"}},{"id":49463,"nodeType":"EventDefinition","src":"3830:113:35","nodes":[],"anonymous":false,"documentation":{"id":49451,"nodeType":"StructuredDocumentation","src":"3248:577:35","text":" keyLockerWithdrawal\n This event is emitted when a key is removed from the contract\n permanently, which can only be done by the trust root key holder. \n @param operator         the message sender that removed and received the key\n @param locksmith        the address of the locksmith the key is for\n @param rootKeyId        the verified root key ID that was used for removal\n @param keyId            the ID of the key that was removed\n @param amount           the amount of keys redeemed from locker use"},"eventSelector":"746f04626afbab6e36dbb513f5d7628c9d467d1fd79724087328d4488c11da7b","name":"keyLockerWithdrawal","nameLocation":"3836:19:35","parameters":{"id":49462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49453,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"3864:8:35","nodeType":"VariableDeclaration","scope":49463,"src":"3856:16:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49452,"name":"address","nodeType":"ElementaryTypeName","src":"3856:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":49455,"indexed":false,"mutability":"mutable","name":"locksmith","nameLocation":"3882:9:35","nodeType":"VariableDeclaration","scope":49463,"src":"3874:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49454,"name":"address","nodeType":"ElementaryTypeName","src":"3874:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":49457,"indexed":false,"mutability":"mutable","name":"rootKeyId","nameLocation":"3901:9:35","nodeType":"VariableDeclaration","scope":49463,"src":"3893:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49456,"name":"uint256","nodeType":"ElementaryTypeName","src":"3893:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":49459,"indexed":false,"mutability":"mutable","name":"keyId","nameLocation":"3920:5:35","nodeType":"VariableDeclaration","scope":49463,"src":"3912:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49458,"name":"uint256","nodeType":"ElementaryTypeName","src":"3912:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":49461,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"3935:6:35","nodeType":"VariableDeclaration","scope":49463,"src":"3927:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49460,"name":"uint256","nodeType":"ElementaryTypeName","src":"3927:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3855:87:35"}},{"id":49477,"nodeType":"FunctionDefinition","src":"6245:116:35","nodes":[],"documentation":{"id":49464,"nodeType":"StructuredDocumentation","src":"4358:1882:35","text":" useKeys \n A message sender is assumed to be calling this method while holding\n a soulbound version of the key the expect to use. If held, the caller's\n provided destination and calldata will be used to *send* the key\n into the destination contract with associated calldata.\n It is *critical* that this interface is not extended to otherwise delegate calls\n or call other contracts from the Locker because the locker will also hold other\n keys.\n It is fully expected that the key will be returned to the locker by the end of\n the transaction, or the entire transction will revert. This protects the key\n from being arbitrarily stolen.\n It will also ensure that at the end of the transaction the message sender is\n still holding the soulbound key, as to ensure malicious transactions cannot\n use the Locker to somehow strip you of the permission you are using.\n It is not explicitly enforced that *other* keys cannot be removed from the caller\n for composability. When using a root key locker, it is critical to\n trust the destination contract.\n This method can revert for the following reasons:\n - InsufficientKey(): The key locker doesn't currently hold keyId from the provided locksmith.\n - KeyNotHeld(): The message sender doesn't hold the proper key to use the locker.\n - KeyNotReturned(): The instructions didn't result in the key being returned. \n @param locksmith the dependency injected locksmith to use.\n @param keyId the key ID you want to action\n @param amount the number of keys to take on loan \n @param destination the target address to send the key, requiring it be returned\n @param data the encoded calldata to send along with the key to destination."},"functionSelector":"816dac14","implemented":false,"kind":"function","modifiers":[],"name":"useKeys","nameLocation":"6254:7:35","parameters":{"id":49475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49466,"mutability":"mutable","name":"locksmith","nameLocation":"6270:9:35","nodeType":"VariableDeclaration","scope":49477,"src":"6262:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49465,"name":"address","nodeType":"ElementaryTypeName","src":"6262:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":49468,"mutability":"mutable","name":"keyId","nameLocation":"6289:5:35","nodeType":"VariableDeclaration","scope":49477,"src":"6281:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49467,"name":"uint256","nodeType":"ElementaryTypeName","src":"6281:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":49470,"mutability":"mutable","name":"amount","nameLocation":"6304:6:35","nodeType":"VariableDeclaration","scope":49477,"src":"6296:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49469,"name":"uint256","nodeType":"ElementaryTypeName","src":"6296:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":49472,"mutability":"mutable","name":"destination","nameLocation":"6320:11:35","nodeType":"VariableDeclaration","scope":49477,"src":"6312:19:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49471,"name":"address","nodeType":"ElementaryTypeName","src":"6312:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":49474,"mutability":"mutable","name":"data","nameLocation":"6346:4:35","nodeType":"VariableDeclaration","scope":49477,"src":"6333:17:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":49473,"name":"bytes","nodeType":"ElementaryTypeName","src":"6333:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6261:90:35"},"returnParameters":{"id":49476,"nodeType":"ParameterList","parameters":[],"src":"6360:0:35"},"scope":49490,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":49489,"nodeType":"FunctionDefinition","src":"7803:98:35","nodes":[],"documentation":{"id":49478,"nodeType":"StructuredDocumentation","src":"6368:1430:35","text":" redeemKeys \n If a key is held in the locker for use, only a root key holder can remove it. \n This process is known as \"redemption\" as the root key is used to redeem\n the key out of the contract and deactivate the locker for it.\n The reason only a root key can remove the key is due to security. It is assumed\n that an unbound key can be put into the locker by anyone, as only the root key\n holder can create unbound keys. However, we want to avoid situations where key holders\n can't sign a transaction that steals the extra key in any way. A properly segmented\n wallet EOA won't be holding a root key, and such using the key locker is safe even against\n malicious transactions.\n This method can revert for the following reasons:\n - InsufficientKeys(): The key locker doesn't currently hold keyId from the provided locksmith.\n - KeyNotHeld(): The message sender doesn't hold the associated root key\n - InvalidRing(): The message sender is attempting to redeem a key with the wrong root key.\n - KeyNotRoot(): The message sender is attempting to redeem a key not using a root key.\n @param locksmith the dependency injected locksmith to use\n @param rootKeyId the root key you are using to redeem\n @param keyId the key ID to redeem.\n @param amount the number of keys to fully redeem"},"functionSelector":"54d178e4","implemented":false,"kind":"function","modifiers":[],"name":"redeemKeys","nameLocation":"7812:10:35","parameters":{"id":49487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49480,"mutability":"mutable","name":"locksmith","nameLocation":"7831:9:35","nodeType":"VariableDeclaration","scope":49489,"src":"7823:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49479,"name":"address","nodeType":"ElementaryTypeName","src":"7823:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":49482,"mutability":"mutable","name":"rootKeyId","nameLocation":"7850:9:35","nodeType":"VariableDeclaration","scope":49489,"src":"7842:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49481,"name":"uint256","nodeType":"ElementaryTypeName","src":"7842:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":49484,"mutability":"mutable","name":"keyId","nameLocation":"7869:5:35","nodeType":"VariableDeclaration","scope":49489,"src":"7861:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49483,"name":"uint256","nodeType":"ElementaryTypeName","src":"7861:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":49486,"mutability":"mutable","name":"amount","nameLocation":"7884:6:35","nodeType":"VariableDeclaration","scope":49489,"src":"7876:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":49485,"name":"uint256","nodeType":"ElementaryTypeName","src":"7876:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7822:69:35"},"returnParameters":{"id":49488,"nodeType":"ParameterList","parameters":[],"src":"7900:0:35"},"scope":49490,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":49425,"name":"IERC165","nameLocations":["1993:7:35"],"nodeType":"IdentifierPath","referencedDeclaration":46389,"src":"1993:7:35"},"id":49426,"nodeType":"InheritanceSpecifier","src":"1993:7:35"}],"canonicalName":"IKeyLocker","contractDependencies":[],"contractKind":"interface","documentation":{"id":49424,"nodeType":"StructuredDocumentation","src":"1011:957:35","text":" KeyLocker \n The Key locker acts as a secure key vault and agent. Normally, all keys (including root keys)\n will be soulbound to their default EOAs. This ensures that key holders\n can not easily be drained of their keys via malicious signatures or transactions.\n However, soulbound keys can not be easily stored or moved, and thus secure access to a\n moveable key that must be returned has the delegation benefits of account abstraction\n without the associated security risks of losing or leaking access to untrusted third\n parties.\n To use, an operator that has possession to an unbound key can send it\n into the contract to create a locker. Any operator that holds the same key\n can call #useKey to produce a delegated execution path, with the locker\n asserting that the transaction completes with the key returned.\n Only root key holds can move the key out of the locker permanently by calling\n #redeemKey."},"fullyImplemented":false,"linearizedBaseContracts":[49490,46389],"name":"IKeyLocker","nameLocation":"1979:10:35","scope":49491,"usedErrors":[],"usedEvents":[49437,49450,49463]}],"license":"MIT"},"id":35}